{"version":3,"sources":["Header.js","Footer.jsx","Post.jsx","AddpostForm.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","props","console","log","Profile","name","Footer","className","Post","useState","likes","setlikes","liike","author","message","color","onClick","AddCommentForm","comments","map","comment","Comment","key","_id","AddPostForm","Feed","swipeLeft","content","action","info","swipeRight","posts","item","Author","App","setposts","useEffect","fetch","baseURL","method","headers","then","e","json","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAEe,SAASA,EAAOC,GAE7B,OADAC,QAAQC,IAAIF,GAEV,0CAEE,kBAACG,EAAD,CAASC,KAAMJ,EAAMI,QAK3B,SAASD,EAAQH,GACf,OAAO,4BAAKA,EAAMI,KAAX,iBCXM,SAASC,EAAOL,GAC7B,OAAO,uBAAGM,UAAU,UAAUN,EAAMI,KAA7B,a,oBCCM,SAASG,EAAKP,GAAQ,IAAD,EACRQ,mBAAS,GADD,mBAC3BC,EAD2B,KACpBC,EADoB,KAK5BC,EAAQX,EAAMS,MAAQA,EAC5B,OACE,yBAAKH,UAAU,SACb,4BAAKN,EAAMY,QACX,4BAAKZ,EAAMa,SACX,4BAAKF,EAAL,UACA,kBAAC,IAAD,CAAQG,MAAM,UAAUC,QATT,WACjBL,EAASD,EAAQ,KAQf,aAIA,kBAACO,EAAD,MACA,4BACGhB,EAAMiB,SAASC,KAAI,SAAAC,GAClB,OACE,kBAACC,EAAD,CACEC,IAAKF,EAAQG,IACbV,OAAQO,EAAQP,OAChBO,QAASA,EAAQA,eAQ/B,SAASH,IACP,OAAO,0CAGT,SAASI,EAAQpB,GACf,OACE,6BACE,4BACGA,EAAMY,OADT,UACwBZ,EAAMmB,UCxCrB,SAASI,IACtB,OAAO,4B,iBCUT,SAASC,EAAKxB,GACZ,OACE,yBAAKM,UAAU,QACb,kBAAC,gBAAD,KACE,kBAAC,oBAAD,CACEmB,UAAW,CACTC,QAAS,gDACTC,OAAQ,kBAAM1B,QAAQ2B,KAAK,4BAE7BC,WAAY,CACVH,QAAS,+CACTC,OAAQ,kBAAM1B,QAAQ2B,KAAK,6BAG7B,yBAAKtB,UAAU,YAAf,gBAGJ,kBAACiB,EAAD,MACCvB,EAAM8B,MAAMZ,KAAI,SAAAa,GACf,OACE,kBAACxB,EAAD,CACEc,IAAKU,EAAKT,IACVb,MAAOsB,EAAKtB,MACZQ,SAAUc,EAAKd,SACfJ,QAASkB,EAAKlB,QACdD,OAAQmB,EAAKC,aAgEVC,MAxDf,WACE,IADa,EAcazB,mBAAS,IAdtB,mBAcNsB,EAdM,KAcCI,EAdD,KA4Cb,OA7BAC,qBAAU,WAORC,MAAMC,8DAAsC,CAC1CC,OAAQ,MACRC,QAPc,CACd,eAAgB,kCAChB,WAAY,2BACZ,gBAAiB,cAMhBC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OAAIP,EAASO,QACrB,IAiBD,yBAAKnC,UAAU,OACb,kBAACP,EAAD,CAAQK,KA7CC,UA8CT,kBAAC,IAAD,CAAQW,QAjBZ,WAIEmB,EACEJ,EAAMa,OAAO,CACX9B,QAAS,+BACTmB,OAAQ,QACRV,IAAK,GACLb,MAAO,GACPQ,SAAU,QAOZ,YAEA,kBAACO,EAAD,CAAMM,MAAOA,IAEb,kBAACzB,EAAD,CAAQD,KAlDC,YCnCKwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMf,MAAK,SAAAgB,GACjCA,EAAaC,iB","file":"static/js/main.1d90cb2c.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Header(props) {\n  console.log(props);\n  return (\n    <header>\n      HEADER:\n      <Profile name={props.name} />\n    </header>\n  );\n}\n\nfunction Profile(props) {\n  return <h1>{props.name}´s Profile</h1>;\n}\n","import React from \"react\";\n\nexport default function Footer(props) {\n  return <p className=\"footer\">{props.name}'s Footer</p>;\n}\n","import React, { useState } from \"react\";\n\nimport Button from \"muicss/lib/react/button\";\n\nexport default function Post(props) {\n  const [likes, setlikes] = useState(0);\n  const updateLike = () => {\n    setlikes(likes + 1);\n  };\n  const liike = props.likes + likes;\n  return (\n    <div className=\"posts\">\n      <h2>{props.author}</h2>\n      <h2>{props.message}</h2>\n      <h3>{liike} likes</h3>\n      <Button color=\"primary\" onClick={updateLike}>\n        Like post\n      </Button>\n\n      <AddCommentForm />\n      <ol>\n        {props.comments.map(comment => {\n          return (\n            <Comment\n              key={comment._id}\n              author={comment.author}\n              comment={comment.comment}\n            />\n          );\n        })}\n      </ol>\n    </div>\n  );\n}\nfunction AddCommentForm() {\n  return <p>CommentForm</p>;\n}\n\nfunction Comment(props) {\n  return (\n    <div>\n      <li>\n        {props.author} said: {props.comment}\n      </li>\n    </div>\n  );\n}\n","import React from \"react\";\n\nexport default function AddPostForm() {\n  return <p></p>;\n}\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Post from \"./Post\";\nimport AddPostForm from \"./AddpostForm\";\nimport Button from \"muicss/lib/react/button\";\nimport {\n  SwipeableList,\n  SwipeableListItem\n} from \"@sandstreamdev/react-swipeable-list\";\nimport \"@sandstreamdev/react-swipeable-list/dist/styles.css\";\n\nfunction Feed(props) {\n  return (\n    <div className=\"feed\">\n      <SwipeableList>\n        <SwipeableListItem\n          swipeLeft={{\n            content: <div>React Component</div>,\n            action: () => console.info(\"swipe action triggered\")\n          }}\n          swipeRight={{\n            content: <div>Eksempel på</div>,\n            action: () => console.info(\"swipe action triggered\")\n          }}\n        >\n          <div className=\"eksempel\">Mouad Naji</div>\n        </SwipeableListItem>\n      </SwipeableList>\n      <AddPostForm />\n      {props.posts.map(item => {\n        return (\n          <Post\n            key={item._id}\n            likes={item.likes}\n            comments={item.comments}\n            message={item.message}\n            author={item.Author}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nfunction App() {\n  const name = \"Mouad\"; // pass to profile and footer\n  // const posts = [<Post />, <Post />, <Post />]; // pass this to feed\n  /*const [likes, setlikes] = useState([\n    {\n      message: \"Im having a great day today\",\n      author: \"Mouad\"\n    },\n    {\n      message: \"Im also having a great day\",\n      author: \"Mathias\"\n    }\n  ]);*/\n\n  const [posts, setposts] = useState([]);\n  useEffect(() => {\n    const baseURL = \"https://movies-cb29.restdb.io/rest/\";\n    const headers = {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"x-apikey\": \"5d9108cc1ce70f637985514f\",\n      \"cache-control\": \"no-cache\"\n    };\n    fetch(baseURL + \"posts?fetchchildren=true\", {\n      method: \"get\",\n      headers: headers\n    })\n      .then(e => e.json())\n      .then(e => setposts(e));\n  }, []);\n\n  function addPost() {\n    /*const[author, setAuthor] = useState(\"\"):\n    const[message, setMessage] = useState(\"\"):*/ //////////////////////////////////////////////////////\n\n    setposts(\n      posts.concat({\n        message: \"im having a decent day today\",\n        Author: \"Peter\",\n        _id: \"\",\n        likes: \"\",\n        comments: \"\"\n      })\n    );\n  }\n  return (\n    <div className=\"App\">\n      <Header name={name} />\n      <Button onClick={addPost}>Add post</Button>\n\n      <Feed posts={posts} />\n\n      <Footer name={name} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}